// // Odliƒçno vpra≈°anje! V JavaScriptu imata tako Array.prototype.map() kot Array.prototype.forEach() pomembno vlogo, vendar slu≈æita razliƒçnim namenom. Tukaj je razlika jasno prikazana:

// // üîπ forEach()
// // Namen: Izvede neko funkcijo na vsakem elementu arraya.

// Ne vraƒça novega arraya (vraƒça undefined).

// Uporablja≈° ga, kadar ≈æeli≈° nekaj narediti, npr. prikazati, zapisati, spremeniti stanje, itd.

// javascript
// Kopiraj
// Uredi
const stevila = [1, 2, 3];

stevila.forEach((x) => {
	console.log(x * 2); // Izpi≈°e: 2, 4, 6
});

// Rezultat: undefined
// üîπ map()
// Namen: Izvede funkcijo na vsakem elementu in vrne nov array z rezultati.

// Ne spreminja originalnega arraya.

// Uporablja≈° ga, kadar ≈æeli≈° ustvariti nov array iz obstojeƒçega.

// javascript
// Kopiraj
// Uredi
const stevilaII = [1, 2, 3];

const podvojena = stevilaII.map((x) => x * 2);
console.log(podvojena); // [2, 4, 6]
// üü° Primer: Razlika v rabi
// javascript
// Kopiraj
// Uredi
const imena = ["Ana", "Boris", "Cene"];

// forEach ‚Äì samo izpis
imena.forEach((ime) => {
	console.log("Pozdravljen, " + ime);
});

// map ‚Äì ustvarimo nov array z dol≈æinami imen
const dolzine = imena.map((ime) => ime.length);
console.log(dolzine); // [3, 5, 4]

// ‚úÖ Kdaj uporabiti map:
// Ko potrebuje≈° nov seznam (spremenjenih) vrednosti.

// ‚úÖ Kdaj uporabiti forEach:
// Ko ≈æeli≈° nekaj izvesti, npr. prikazati, shraniti v localStorage, po≈°iljati podatke...
